// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    password      String?
    accounts      Account[]
    sessions      Session[]
    hasBusiness   Boolean?  @default(false)
    business      Business?
}

// Business model
model Business {
  id         Int       @id @default(autoincrement())
  name       String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  services   Service[]
  staff      Staff[]

  // User relation
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @unique
}

// Service model
model Service {
  id              Int      @id @default(autoincrement())
  name            String
  cost            Float
  time_required   Int
  staff_available StaffService[]
  business        Business @relation(fields: [businessId], references: [id])
  businessId      Int
}

// Staff model
model Staff {
  id          Int      @id @default(autoincrement())
  name        String
  email       String
  services    StaffService[]
  business    Business @relation(fields: [businessId], references: [id])

  // Service relation
  businessId  Int
}

// StaffService model to represent the many-to-many relationship between Service and Staff
model StaffService {
  staff      Staff @relation(fields: [staffId], references: [id])
  staffId    Int
  service    Service @relation(fields: [serviceId], references: [id])
  serviceId  Int

  @@id([staffId, serviceId])
}


model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
